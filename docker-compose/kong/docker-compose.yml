version: '2.1'

volumes:
    data:

services:
  kong-db:
    image: postgres:11.2-alpine
    #command: postgres -c 'max_connections=500'
    environment:
      POSTGRES_DB: kong
      POSTGRES_PASSWORD: kong
      POSTGRES_USER: kong
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 30s
      timeout: 30s
      retries: 3
    stdin_open: true
    tty: true
    volumes:
      - data:/var/lib/postgresql/data
    restart: on-failure
  #kong-migrations:
  #  image: kong:1.1.2-alpine
  #  command: kong migrations bootstrap
  #  depends_on:
  #    kong-db:
  #      condition: service_healthy
  #  environment:
  #    KONG_DATABASE: postgres
  #    KONG_PG_DATABASE: kong
  #    KONG_PG_HOST: kong-db
  #    KONG_PG_PASSWORD: kong
  #    KONG_PG_USER: kong
  #  links:
  #    - kong-db:kong-db
  #  networks:
  #    - default
  #  restart: on-failure
  kong:
    image: kong:1.1.2-alpine
    user: root
    depends_on:
      kong-db:
        condition: service_healthy
    environment:
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: '0.0.0.0:8001'
      KONG_CASSANDRA_CONTACT_POINTS: kong-db
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: kong
      KONG_PG_HOST: kong-db
      KONG_PG_PASSWORD: kong
      KONG_PG_USER: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
    ports:
      - "8000:8000/tcp"
      - "8001:8001/tcp"
      #- "8443:8443/tcp"
      #- "8444:8444/tcp"
    restart: on-failure
  konga:
    image: konga:0.14.3
    ports:
      - 1337:1337
    environment:
      - NODE_ENV=production
      - TOKEN_SECRET=cesan
      - DB_ADAPTER=postgres
      - DB_HOST=kong-db
      - DB_USER=kong
      - DB_PASSWORD=kong
      - DB_DATABASE=kong
      - DB_PG_SCHEMA=konga
    restart: on-failure
