application {
  config {
    applicationType gateway
    authenticationType jwt
    baseName gateway
    buildTool maven
    cacheProvider hazelcast
    clientFramework angularX
    clientTheme none
    databaseType sql
    devDatabaseType mariadb
    enableHibernateCache true
    enableSwaggerCodegen false
    enableTranslation true
    languages [pt-br]
    nativeLanguage pt-br
    packageName com.lzkill.gateway
    prodDatabaseType mariadb
    serverPort 8080
    serviceDiscoveryType eureka
    useSass true
  }
  entities *
}

application {
  config {
    applicationType microservice
    authenticationType jwt
    baseName sgq
    buildTool maven
    cacheProvider hazelcast
    databaseType sql
    devDatabaseType mariadb
    enableHibernateCache true
    enableSwaggerCodegen true
    enableTranslation false
    languages [pt-br]
    nativeLanguage pt-br
    packageName com.lzkill.sgq
    prodDatabaseType mariadb
    serverPort 8081
    serviceDiscoveryType eureka
    skipClient true
  }
  entities * except Norma
}

// >>>>>>>>>> cadastros_basicos
entity Empresa {
  nome String required minlength(1) maxlength(100)
  habilitado Boolean required
}

entity Setor {
  nome String required minlength(1) maxlength(100)
  habilitado Boolean required
}

entity Processo {
  titulo String required minlength(1) maxlength(100)
  descricao TextBlob
  habilitado Boolean required
}

entity Produto {
  nome String required minlength(1) maxlength(100)
  descricao TextBlob
  habilitado Boolean required
}

entity PublicoAlvo {
  nome String required minlength(1) maxlength(100)
  descricao TextBlob
  habilitado Boolean required
}

entity CategoriaPublicacao {
  titulo String required minlength(1) maxlength(100)
  descricao TextBlob
  habilitado Boolean required
}

entity Anexo {
  idUsuarioRegistro Integer required
  dataRegistro Instant required
  nomeArquivo String required
  conteudo AnyBlob required maxbytes(10485760) // 10 MB
}
// <<<<<<<<<< cadastros_basicos

// >>>>>>>>>> incidentes_problemas
/**
* Representa a violação de algum requisito regulamentar (normas,
* procedimentos internos, definições de processos, etc)
*/
entity NaoConformidade {
  idUsuarioRegistro Integer required
  idUsuarioResponsavel Integer
  titulo String required minlength(1) maxlength(100)
  descricao TextBlob required
  /** O fato descrito implica de fato uma NC? */
  procedente Boolean
  /** O fechamento da NC só é possível se houver identificação de causa */
  causa TextBlob
  prazoConclusao Instant
  novoPrazoConclusao Instant
  dataRegistro Instant required
  dataConclusao Instant
  /** Análise de eficácia */
  analiseFinal TextBlob
  statusSGQ StatusSGQ required
}

/**
* Representa os produtos produzidos fora dos parâmetros de qualidade estabelecidos
*/
entity ProdutoNaoConforme {
  idUsuarioRegistro Integer required
  idUsuarioResponsavel Integer
  titulo String required minlength(1) maxlength(100)
  descricao TextBlob required
  /** O fato descrito configura de fato um PNC? */
  procedente Boolean
  dataRegistro Instant required
  /** Análise de eficácia */
  analiseFinal TextBlob
  statusSGQ StatusSGQ required
}

entity AcaoSGQ {
  idUsuarioRegistro Integer required
  idUsuarioResponsavel Integer
  tipo TipoAcaoSGQ required
  titulo String required minlength(1) maxlength(100)
  descricao TextBlob required
  prazoConclusao Instant
  novoPrazoConclusao Instant
  dataRegistro Instant required
  dataConclusao Instant
  resultado TextBlob
  statusSGQ StatusSGQ required
}

/**
* Ações corretivas aplicam-se a NCs, enquanto
* correções pontuais aplicam-se a PNCs
*/
enum TipoAcaoSGQ {
  ACAO_CORRETIVA,
  ACAO_PREVENTIVA,
  CORRECAO_PONTUAL
}

enum StatusSGQ {
  REGISTRADO,
  PENDENTE,
  CONCLUIDO,
  SUSPENSO,
  CANCELADO
}
// <<<<<<<<<< incidentes_problemas

// >>>>>>>>>> controle_processos_automotivos
entity PlanoAuditoria {
  titulo String required minlength(1) maxlength(100)
  descricao TextBlob
  habilitado Boolean required
}

entity ItemPlanoAuditoria {
  titulo String required minlength(1) maxlength(100)
  descricao TextBlob
  modalidade ModalidadeAuditoria required
  dataInicio Instant required
  dataFim Instant
}

enum ModalidadeAuditoria {
  INTERNA,
  EXTERNA
}

entity ItemAuditoria {
  titulo String required minlength(1) maxlength(100)
  /** Requisitos abordados, objetivos, etc */
  descricao TextBlob
  habilitado Boolean required
}

entity Auditoria {
  idUsuarioRegistro Integer required
  titulo String required minlength(1) maxlength(100)
  descricao TextBlob
  dataRegistro Instant required
  dataInicio Instant
  dataFim Instant
}

entity Checklist {
  titulo String required minlength(1) maxlength(100)
  periodicidade Periodicidade
  habilitado Boolean required
}

enum Periodicidade {
  DIARIA,
  SEMANAL,
  QUINZENAL,
  MENSAL,
  BIMESTRAL,
  TRIMESTRAL,
  SEMESTRAL,
  ANUAL
}

entity ItemChecklist {
  ordem Integer required min(1)
  titulo String required minlength(1) maxlength(100)
  descricao TextBlob
}

entity ResultadoChecklist {
  idUsuarioRegistro Integer required
  dataRegistro Instant required
  dataVerificacao Instant required
}

entity ResultadoItemChecklist {
  conforme Boolean required
  descricao TextBlob
}

entity EventoOperacional {
  idUsuarioRegistro Integer required
  tipo TipoEventoOperacional required
  titulo String required minlength(1) maxlength(100)
  descricao TextBlob required
  dataRegistro Instant required
  dataEvento Instant required
  duracao Duration
  houveParadaProducao Boolean required
}

enum TipoEventoOperacional {
  FALHA_EQUIPAMENTO,
  FALHA_INFRA_ESTRUTURA,
  FALHA_PROCESSO
}
// <<<<<<<<<< controle_processos_automotivos

// >>>>>>>>>> divulgacao_transparencia
entity CampanhaRecall {
  idUsuarioRegistro Integer required
  titulo String required minlength(1) maxlength(100)
  descricao TextBlob
  dataRegistro Instant required
  dataInicio Instant
  dataFim Instant
  dataPublicacao Instant
  status StatusPublicacao required
}

entity BoletimInformativo {
  idUsuarioRegistro Integer required
  titulo String required minlength(1) maxlength(100)
  descricao TextBlob
  dataRegistro Instant required
  dataPublicacao Instant
  status StatusPublicacao required
}

entity Feed {
  idUsuarioRegistro Integer required
  tipo TipoFeed required
  titulo String required minlength(1) maxlength(100)
  descricao String required minlength(1) maxlength(250)
  uri String required unique minlength(1) maxlength(150)
  link String minlength(1) maxlength(150)
  urlImagem String minlength(1) maxlength(150)
  tituloImagem String minlength(1) maxlength(150)
  alturaImagem Integer min(32) max(1024)
  larguraImagem Integer min(32) max(1024)
  dataRegistro Instant required
  habilitado Boolean required
}

enum TipoFeed {
  RSS,
  ATOM
}

entity PublicacaoFeed {
  idUsuarioRegistro Integer required
  titulo String required minlength(1) maxlength(100)
  autor String required minlength(1) maxlength(100)
  uri String required unique minlength(1) maxlength(150)
  link String minlength(1) maxlength(150)
  conteudo TextBlob required
  dataRegistro Instant required
  dataPublicacao Instant
  status StatusPublicacao required
}

enum StatusPublicacao {
  RASCUNHO,
  APROVADO,
  PUBLICADO
}
// <<<<<<<<<< divulgacao_transparencia

// >>>>>>>>>> compliance
/**
* Do trecho
*
* <i>"Os serviços prestados por esses órgãos devem gerar insumos para o
* planejamento e controle das atividades da empresa, devendo ser compatibilizado
* com o SGQ por meio de integrações providas por APIs de serviços."</i>
*
* entende-se que a prestadora de serviço deve disponibilizar alguns serviços
* através de API cuja interface é definida pela empresa dona do SGQ.
*/
entity Consultoria {
  nome String required minlength(1) maxlength(100)
  urlIntegracao String required minlength(1) maxlength(150)
  /** Token JWT */
  tokenAcesso String required minlength(1)
  habilitado Boolean required
}

/**
* Os planos de ação das NCs podem ser analisados pela consultoria antes da
* implementação
*/
entity SolicitacaoAnalise {
  idUsuarioRegistro Integer required
  dataRegistro Instant required
  /** Data em que a solicitação foi recebida pela consultoria */
  dataSolicitacao Instant
  /** ID retornado pela consultoria para acompanhamento */
  uuid String unique
  status StatusSolicitacaoAnalise required
}

enum StatusSolicitacaoAnalise {
  REGISTRADO,
  PENDENTE,
  CONCLUIDO
}

entity AnaliseConsultoria {
  dataAnalise Instant required
  conteudo TextBlob required
  responsavel String required minlength(1) maxlength(100)
  status StatusAprovacao required
}

enum StatusAprovacao {
  APROVADO,
  APROVADO_PARCIALMENTE,
  REPROVADO
}

/**
* Do trecho
*
* <i>"O repositório de normas está disponível em nuvem como um serviço (SaaS)..."</i>
*
* entende-se que a aplicação deve consumir uma API cuja interface é definida
* pela empresa fornecedora de SaaS.
*/
@readOnly
entity Norma {
  orgao String
  titulo String
  descricao TextBlob
  versao String
  numeroEdicao Integer
  dataEdicao Instant
  dataInicioValidade Instant
  categoria String
  urlDownload String
}
// <<<<<<<<<< compliance

relationship OneToOne {
  /** PNCs são tratados com ações únicas e pontuais */
  ProdutoNaoConforme{acao(titulo)} to AcaoSGQ
  /** Quando o problema identificado é sistêmico pode-se abrir uma NC */
  ProdutoNaoConforme{naoConformidade(titulo)} to NaoConformidade
  SolicitacaoAnalise{analiseConsultoria} to AnaliseConsultoria{solicitacaoAnalise required}
  SolicitacaoAnalise{naoConformidade(titulo) required} to NaoConformidade
}

relationship OneToMany {
  Auditoria{naoConformidade(titulo)} to NaoConformidade{auditoria}
  Checklist{item(titulo)} to ItemChecklist{checklist(titulo) required}
  Empresa{produto(nome)} to Produto{empresa(nome) required}
  Empresa{setor(nome)} to Setor{empresa(nome) required}
  NaoConformidade{acaoSGQ(titulo)} to AcaoSGQ{naoConformidade(titulo)}
  PlanoAuditoria{item(titulo)} to ItemPlanoAuditoria{plano(titulo) required}
  ResultadoChecklist{resultadoItem} to ResultadoItemChecklist{resultado(titulo) required}
  ResultadoChecklist{naoConformidade(titulo)} to NaoConformidade{resultadoChecklist}
  ResultadoChecklist{produtoNaoConforme(titulo)} to ProdutoNaoConforme{resultadoChecklist}
  Setor{checklist(titulo)} to Checklist{setor(nome) required}
  Setor{processo(titulo)} to Processo{setor(nome) required}
}

relationship ManyToOne {
  BoletimInformativo{publicoAlvo(nome) required} to PublicoAlvo
  CampanhaRecall{produto(nome) required} to Produto
  CampanhaRecall{setorResponsavel(nome) required} to Setor
  EventoOperacional{processo(titulo)} to Processo
  ItemAuditoria{processo(titulo)} to Processo
  ItemPlanoAuditoria{itemAuditoria(titulo)} to ItemAuditoria
  ProdutoNaoConforme{produto(nome) required} to Produto
  PublicacaoFeed{feed(titulo) required} to Feed
  ResultadoChecklist{checklist(titulo) required} to Checklist
  ResultadoItemChecklist{item(titulo) required} to ItemChecklist
  SolicitacaoAnalise{consultoria(nome) required} to Consultoria
}

relationship ManyToMany {
  Auditoria{itemAuditoria(titulo)} to ItemAuditoria{auditoria(titulo)}
  BoletimInformativo{categoria(titulo) required} to CategoriaPublicacao{boletim(titulo)}
  PublicacaoFeed{categoria(titulo) required} to CategoriaPublicacao{publicacao(titulo)}

  // Better looking Anexo table if mapped this way
  AcaoSGQ{anexo(nomeArquivo)} to Anexo{acaoSGQ}
  Auditoria{anexo(nomeArquivo)} to Anexo{auditoria}
  AnaliseConsultoria{anexo(nomeArquivo)} to Anexo{analiseConsultoria}
  BoletimInformativo{anexo(nomeArquivo)} to Anexo{boletimInformativo}
  CampanhaRecall{anexo(nomeArquivo)} to Anexo{campanhaRecall}
  Checklist{anexo(nomeArquivo)} to Anexo{checklist}
  EventoOperacional{anexo(nomeArquivo)} to Anexo{eventoOperacional}
  ItemAuditoria{anexo(nomeArquivo)} to Anexo{itemAuditoria}
  ItemChecklist{anexo(nomeArquivo)} to Anexo{itemChecklist}
  ItemPlanoAuditoria{anexo(nomeArquivo)} to Anexo{itemPlanoAuditoria}
  NaoConformidade{anexo(nomeArquivo)} to Anexo{naoConformidade}
  Processo{anexo(nomeArquivo)} to Anexo{processo}
  Produto{anexo(nomeArquivo)} to Anexo{produto}
  PlanoAuditoria{anexo(nomeArquivo)} to Anexo{planoAuditoria}
  ProdutoNaoConforme{anexo(nomeArquivo)} to Anexo{produtoNaoConforme}
  PublicacaoFeed{anexo(nomeArquivo)} to Anexo{publicacaoFeed}
  ResultadoChecklist{anexo(nomeArquivo)} to Anexo{resultadoChecklist}
  ResultadoItemChecklist{anexo(nomeArquivo)} to Anexo{resultadoItemChecklist}
}

filter *

paginate * with pagination

microservice * with sgq except Norma

deployment {
  deploymentType docker-compose
  dockerRepositoryName "jmicro"
  appsFolders [gateway, sgq]
  monitoring elk
  serviceDiscoveryType eureka
}
